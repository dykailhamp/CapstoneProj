#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// ---------- WiFi ----------
const char* ssid = "Galaxy A73";
const char* password = "engkodisit";

// ---------- Telegram ----------
String BOT_TOKEN = "7725490830:AAHuYXAdTjlK1s53H-p5Ih4mAzvvZRTo6yg";
String CHAT_ID = "6586488639";
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long lastTelegramCheck = 0;

// ---------- ESP32-CAM ----------
const char* camSnapURL = "http://192.168.151.7/snap";

// ---------- Web Server ----------
WebServer server(80);

// ---------- PIN ----------
#define PIR_PIN     13
#define BUTTON_PIN  32
#define BUZZER_PIN  25

// ---------- LCD I2C 16x2 ----------
LiquidCrystal_I2C lcd(0x27, 16, 2);  // 16 karakter x 2 baris

// ---------- STATE ----------
bool motionDetected = false;
bool isWelcomeShown = false;
unsigned long lastTriggerTime = 0;
const unsigned long pirDelay = 60000;

enum Mode { NORMAL, DND };
Mode currentMode = NORMAL;

// ---------- Scroll Variables for DND ----------
String dndScrollText = "Pemilik rumah sedang tidur / tidak di rumah ";
int scrollIndex = 0;
unsigned long lastScrollTime = 0;
const unsigned long scrollDelay = 300;

// ---------- Fungsi Kirim ke ESP32-CAM ----------
void triggerSnap() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(camSnapURL);
    int httpCode = http.GET();
    if (httpCode > 0) {
      Serial.println("📸 Permintaan snap terkirim!");
    }
    http.end();
    delay(5000);
  } else {
    Serial.println("📴 WiFi tidak tersedia");
  }
}

// ---------- Mode DND ----------
void updateLCD_DND() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("DND Mode Aktif");
  isWelcomeShown = false;
  scrollIndex = 0;
}

// ---------- Mode Normal: Tampilkan WELCOME penuh di 2 baris ----------
void updateWelcome() {
  if (!isWelcomeShown && currentMode == NORMAL) {
    lcd.clear();
    lcd.setCursor(1, 0);  // Tengah baris pertama
    lcd.print("SELAMAT DATANG");
    lcd.setCursor(0, 1);  // Baris kedua penuh garis
    lcd.print("================");
    isWelcomeShown = true;
  }
}

// ---------- Cek Telegram ----------
void handleTelegram() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

  while (numNewMessages) {
    for (int i = 0; i < numNewMessages; i++) {
      String text = bot.messages[i].text;
      String chat_id = bot.messages[i].chat_id;

      if (text == "/start") {
        String message = "Pilih mode:\n/normal - Mode Normal\n/dnd - Do Not Disturb";
        bot.sendMessage(chat_id, message, "");
      } else if (text == "/normal") {
        currentMode = NORMAL;
        bot.sendMessage(chat_id, "✅ Mode Normal aktif", "");
        updateWelcome();
      } else if (text == "/dnd") {
        currentMode = DND;
        bot.sendMessage(chat_id, "🔕 Mode DND aktif", "");
        updateLCD_DND();
      }
    }
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
}

// ---------- Scroll Text di Baris 2 Saat DND ----------
void scrollDNDText() {
  if (currentMode != DND) return;

  if (millis() - lastScrollTime >= scrollDelay) {
    lastScrollTime = millis();
    String segment = dndScrollText.substring(scrollIndex, scrollIndex + 16); // 16 kolom
    lcd.setCursor(0, 1); // baris kedua
    lcd.print(segment);
    scrollIndex++;
    if (scrollIndex > dndScrollText.length() - 16) {
      scrollIndex = 0;
    }
  }
}

// ---------- Setup ----------
void setup() {
  Serial.begin(115200);
  pinMode(PIR_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
  pinMode(BUZZER_PIN, OUTPUT);

  Wire.begin(21, 22); // SDA, SCL ESP32
  lcd.init();
  lcd.backlight();
  updateWelcome();

  WiFi.begin(ssid, password);
  secured_client.setInsecure();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ Terhubung ke WiFi");
  Serial.println("📡 IP ESP Dev Kit: " + WiFi.localIP().toString());

  server.begin();
}

// ---------- Loop ----------
void loop() {
  server.handleClient();

  unsigned long currentMillis = millis();
  bool pirValue = digitalRead(PIR_PIN);
  bool buttonState = digitalRead(BUTTON_PIN);

  if (pirValue == HIGH && !motionDetected) {
    if (currentMillis - lastTriggerTime >= pirDelay) {
      motionDetected = true;
      lastTriggerTime = currentMillis;
      Serial.println("🔍 Gerakan terdeteksi! Kirim perintah ke ESP32-CAM");
      triggerSnap();
    }
  }

  if (pirValue == LOW) {
    motionDetected = false;
  }

  if (buttonState == HIGH) {
    if (currentMode == NORMAL) {
      digitalWrite(BUZZER_PIN, HIGH);
      delay(1000);
    } else {
      digitalWrite(BUZZER_PIN, LOW);
      Serial.println("🔕 DND Mode: Tidak bunyi");
    }
  } else {
    digitalWrite(BUZZER_PIN, LOW);
  }

  if (currentMode == NORMAL) {
    updateWelcome();
  }

  if (millis() - lastTelegramCheck > 2000) {
    handleTelegram();
    lastTelegramCheck = millis();
  }

  if (currentMode == DND) {
    scrollDNDText();
  }
}
