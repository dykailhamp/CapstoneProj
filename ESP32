#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// ---------- Multi WiFi ----------
const char* ssidList[] = {"Galaxy A73","Wifiumah"};
const char* passList[] = {"engkodisit","kiwil2403"};
const int wifiCount = 2;

// ---------- Telegram ----------
String BOT_TOKEN = "7725490830:AAHuYXAdTjlK1s53H-p5Ih4mAzvvZRTo6yg";
String CHAT_ID = "6586488639";
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long lastTelegramCheck = 0;

// ---------- ESP32-CAM (multi IP) ----------
const char* camSnapURLList[] = {
  "http://192.168.1.21/snap",
  "http://10.51.207.7/snap"
};
const int camSnapCount = sizeof(camSnapURLList) / sizeof(camSnapURLList[0]);

// ---------- Web Server ----------
WebServer server(80);

// ---------- PIN ----------
#define PIR_PIN     13
#define BUTTON_PIN  32
#define BUZZER_PIN  25

// ---------- LCD I2C ----------
LiquidCrystal_I2C lcd(0x27, 16, 2);

// ---------- STATE ----------
bool motionDetected = false;
bool isWelcomeShown = false;
unsigned long lastTriggerTime = 0;
const unsigned long pirDelay = 60000;

enum Mode { NORMAL, DND };
Mode currentMode = NORMAL;

// ---------- Scroll DND ----------
String dndScrollText = "Pemilik rumah sedang tidur / tidak di rumah ";
int scrollIndex = 0;
unsigned long lastScrollTime = 0;
const unsigned long scrollDelay = 300;

void connectToWiFi() {
  WiFi.mode(WIFI_STA);
  for (int i = 0; i < wifiCount; i++) {
    WiFi.begin(ssidList[i], passList[i]);
    Serial.print("🔌 Menghubungkan ke WiFi: ");
    Serial.println(ssidList[i]);
    int retry = 0;
    while (WiFi.status() != WL_CONNECTED && retry < 20) {
      delay(500);
      Serial.print(".");
      retry++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\n✅ Terhubung ke WiFi!");
      Serial.println(WiFi.localIP());
      return;
    }
    WiFi.disconnect();
  }
  Serial.println("❌ Tidak bisa terhubung ke WiFi manapun");
}

void checkWiFiReconnect() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("📴 WiFi terputus. Mencoba reconnect...");
    connectToWiFi();
  }
}

void triggerSnap() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    bool success = false;
    for (int i = 0; i < camSnapCount; i++) {
      Serial.println("🌐 Mencoba akses: " + String(camSnapURLList[i]));
      http.begin(camSnapURLList[i]);
      int httpCode = http.GET();
      if (httpCode == 200) {
        Serial.println("📸 Snap trigger sent!");
        success = true;
        http.end();
        break;
      } else {
        Serial.println("❌ Gagal akses: " + String(camSnapURLList[i]));
        http.end();
      }
    }
    if (!success) Serial.println("⚠️ Semua IP gagal diakses");
    delay(5000);
  } else {
    Serial.println("📴 WiFi tidak tersedia");
  }
}

void updateLCD_DND() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("DND Mode Aktif");
  isWelcomeShown = false;
  scrollIndex = 0;
}

void updateWelcome() {
  if (!isWelcomeShown && currentMode == NORMAL) {
    lcd.clear();
    lcd.setCursor(1, 0);
    lcd.print("SELAMAT DATANG");
    lcd.setCursor(0, 1);
    lcd.print("================");
    isWelcomeShown = true;
  }
}

void handleTelegram() {
  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  while (numNewMessages) {
    for (int i = 0; i < numNewMessages; i++) {
      String text = bot.messages[i].text;
      String chat_id = bot.messages[i].chat_id;
      if (text == "/start") {
        bot.sendMessage(chat_id, "Pilih mode:\n/normal - Mode Normal\n/dnd - Do Not Disturb", "");
      } else if (text == "/normal") {
        currentMode = NORMAL;
        bot.sendMessage(chat_id, "✅ Mode Normal aktif", "");
        updateWelcome();
      } else if (text == "/dnd") {
        currentMode = DND;
        bot.sendMessage(chat_id, "🔕 Mode DND aktif", "");
        updateLCD_DND();
      }
    }
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
}

void scrollDNDText() {
  if (currentMode != DND) return;
  if (millis() - lastScrollTime >= scrollDelay) {
    lastScrollTime = millis();
    String segment = dndScrollText.substring(scrollIndex, scrollIndex + 16);
    lcd.setCursor(0, 1);
    lcd.print(segment);
    scrollIndex++;
    if (scrollIndex > dndScrollText.length() - 16) scrollIndex = 0;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(PIR_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
  pinMode(BUZZER_PIN, OUTPUT);
  Wire.begin(21, 22);
  lcd.init();
  lcd.backlight();
  updateWelcome();

  connectToWiFi();
  secured_client.setInsecure();
  server.begin();
}

void loop() {
  checkWiFiReconnect();
  server.handleClient();
  unsigned long currentMillis = millis();
  bool pirValue = digitalRead(PIR_PIN);
  bool buttonState = digitalRead(BUTTON_PIN);

  if (pirValue && !motionDetected && currentMillis - lastTriggerTime >= pirDelay) {
    motionDetected = true;
    lastTriggerTime = currentMillis;
    Serial.println("🔍 Gerakan terdeteksi!");
    triggerSnap();
  }

  if (!pirValue) motionDetected = false;

  if (buttonState == HIGH) {
    if (currentMode == NORMAL) {
      digitalWrite(BUZZER_PIN, HIGH);
      delay(1000);
    } else {
      digitalWrite(BUZZER_PIN, LOW);
      Serial.println("🔕 DND Mode: Tidak bunyi");
    }
  } else {
    digitalWrite(BUZZER_PIN, LOW);
  }

  if (currentMode == NORMAL) updateWelcome();
  if (millis() - lastTelegramCheck > 2000) {
    handleTelegram();
    lastTelegramCheck = millis();
  }
  if (currentMode == DND) scrollDNDText();
}
